{"version":3,"sources":["components/TodoList/TodoList.jsx","data/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","status","handleChange","event","target","name","value","setState","this","props","todos","selectUser","userId","changeStatus","filterTodos","filter","todo","toLocaleLowerCase","includes","completed","className","htmlFor","id","placeholder","onChange","map","key","classNames","type","checked","readOnly","onClick","React","Component","BASE_URL","getUserId","fetch","then","response","json","CurrentUser","user","loading","error","data","catch","prevProps","clearUser","email","phone","App","selectedUserId","changeTodoStatus","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d36778d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    status: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectUser, userId, changeStatus } = this.props;\n    const { title, status } = this.state;\n    let filterTodos = todos;\n\n    if (title) {\n      filterTodos = todos.filter(\n        todo => todo.title && (\n          todo.title.toLocaleLowerCase().includes(title.toLocaleLowerCase())),\n      );\n    }\n\n    switch (status) {\n      case 'Active':\n        filterTodos = filterTodos.filter(\n          todo => todo.completed !== null && !todo.completed,\n        );\n        break;\n      case 'Completed':\n        filterTodos = filterTodos.filter(\n          todo => todo.completed,\n        );\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label htmlFor=\"input-todo\">\n          <input\n            id=\"input-todo\"\n            name=\"title\"\n            placeholder=\"search todo\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <select\n          name=\"status\"\n          value={status}\n          onChange={this.handleChange}\n        >\n          <option value=\"\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeStatus(todo.id)}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected': todo.userId === userId,\n                    },\n                  )}\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n\n  selectUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUserId(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserId } from '../../data/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    loading: false,\n    error: false,\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.setState({ loading: true });\n    getUserId(userId).then((response) => {\n      this.setState({\n        user: response.data,\n        loading: false,\n      });\n    }).catch(() => this.setState({\n      loading: false,\n      error: true,\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== userId) {\n      this.setState({\n        loading: true,\n        error: false,\n      });\n\n      getUserId(userId).then((response) => {\n        this.setState({\n          user: response.data,\n          loading: false,\n        });\n      }).catch(() => this.setState({\n        loading: false,\n        error: true,\n      }));\n    }\n  }\n\n  render() {\n    const { user, loading, error } = this.state;\n    const { userId, clearUser } = this.props;\n\n    if (loading) {\n      return <p>Waiting</p>;\n    }\n\n    if (error) {\n      return <p>Something went wrong</p>;\n    }\n\n    if (user) {\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${userId}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"button TodoList__user-button--selected\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      );\n    }\n\n    return <p>No user info</p>;\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './data/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then((result) => {\n      this.setState({ todos: result.data });\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  changeTodoStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (id !== todo.id) {\n          return todo;\n        }\n\n        return ({\n          ...todo,\n          completed: !todo.completed,\n        });\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            userId={selectedUserId}\n            changeStatus={this.changeTodoStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}